#define DOFS 10
#include <cmath>
#define restrict __restrict
using namespace std;



 static inline void form_cell_integral_otherwise (double  A[10][10] , const double *restrict coords )
{
  static const double  t0[4][10]  = {{0.447213595499965, -2.78450616323305e-15, 0.0, -0.44721359549996, 0.552786404500046, 2.34164078649988, -1.98136909960008e-15, -9.61959664911769e-15, -0.552786404500044, -2.34164078649988}, 
  {0.447213595499965, 0.0, 1.0448759571136e-15, -0.44721359549996, 2.34164078649988, 0.552786404500049, -4.11854842200351e-15, -7.95426211217995e-15, -2.34164078649988, -0.552786404500044}, 
  {0.447213595499965, -2.43052186613782e-15, 1.22626137683335e-15, 1.34164078649987, 0.552786404500042, 0.552786404500052, -1.6672712254839e-15, -1.78885438199984, -0.552786404500043, -0.552786404500045}, 
  {-1.34164078649987, -1.7981410216487e-15, 0.0, -0.44721359549996, 0.552786404500046, 0.552786404500049, -1.68889334840645e-15, 1.78885438199982, -0.552786404500044, -0.552786404500044}};
  static const double  t1[4][10]  = {{0.447213595499965, -3.23682512361643e-15, -0.447213595499959, 0.0, 0.552786404500045, 0.0, 2.34164078649988, -0.552786404500045, -9.99021374521974e-15, -2.34164078649988}, 
  {0.447213595499965, -3.1700736919939e-15, 1.34164078649987, 0.0, 0.552786404500045, 0.0, 0.552786404500051, -0.552786404500044, -1.78885438199984, -0.552786404500045}, 
  {0.447213595499966, -1.63406968347284e-15, -0.447213595499958, 0.0, 2.34164078649988, 0.0, 0.552786404500047, -2.34164078649988, -8.82073784444134e-15, -0.552786404500044}, 
  {-1.34164078649987, -2.45619955942687e-15, -0.447213595499959, 0.0, 0.552786404500045, 0.0, 0.552786404500049, -0.552786404500045, 1.78885438199982, -0.552786404500045}};
  static const double  t2[4][10]  = {{0.447213595499965, 1.34164078649988, 0.0, 0.0, 0.0, 0.552786404500045, 0.552786404500044, -0.552786404500044, -0.552786404500045, -1.78885438199984}, 
  {0.447213595499965, -0.447213595499958, 0.0, 0.0, 0.0, 0.552786404500045, 2.34164078649988, -0.552786404500044, -2.34164078649988, -6.84805836869457e-15}, 
  {0.447213595499965, -0.447213595499957, 0.0, 0.0, 0.0, 2.34164078649988, 0.552786404500044, -2.34164078649988, -0.552786404500044, -8.50246353926989e-15}, 
  {-1.34164078649987, -0.447213595499956, 0.0, 0.0, 0.0, 0.552786404500045, 0.552786404500045, -0.552786404500045, -0.552786404500045, 1.78885438199982}};
  double  t3  = ((-1) * (coords[0]));
  double  t4  = ((t3) + (coords[3]));
  double  t5  = ((-1) * (coords[1]));
  double  t6  = ((t5) + (coords[7]));
  double  t7  = ((-1) * (coords[2]));
  double  t8  = ((t7) + (coords[11]));
  double  t9  = ((t5) + (coords[10]));
  double  t10  = ((t7) + (coords[8]));
  double  t11  = ((((t6) * (t8))) + (((-1) * (((t9) * (t10))))));
  double  t12  = ((t3) + (coords[6]));
  double  t13  = ((t7) + (coords[5]));
  double  t14  = ((t9) * (t13));
  double  t15  = ((t5) + (coords[4]));
  double  t16  = ((t3) + (coords[9]));
  double  t17  = ((((t15) * (t10))) + (((-1) * (((t6) * (t13))))));
  double  t18  = ((((((t4) * (t11))) + (((t12) * (((t14) + (((-1) * (((t15) * (t8))))))))))) + (((t16) * (t17))));
  double  t19  = ((1) / (t18));
  double  t20  = ((t11) * (t19));
  double  t21  = ((t17) * (t19));
  double  t22  = ((((((t16) * (t10))) + (((t8) * (((-1) * (t12))))))) * (t19));
  double  t23  = ((((((t12) * (t13))) + (((-1) * (((t4) * (t10))))))) * (t19));
  double  t24  = ((((((t12) * (t9))) + (((-1) * (((t16) * (t6))))))) * (t19));
  double  t25  = ((((((t4) * (t6))) + (((-1) * (((t12) * (t15))))))) * (t19));
  double  t26  = ((((((t20) * (t21))) + (((t22) * (t23))))) + (((t24) * (t25))));
  double  t27  = ((((t14) + (((t15) * (((-1) * (t8))))))) * (t19));
  double  t28  = ((((((t4) * (t8))) + (((t13) * (((-1) * (t16))))))) * (t19));
  double  t29  = ((((((t16) * (t15))) + (((-1) * (((t4) * (t9))))))) * (t19));
  double  t30  = ((((((t27) * (t21))) + (((t28) * (t23))))) + (((t29) * (t25))));
  double  t31  = ((((((t21) * (t21))) + (((t23) * (t23))))) + (((t25) * (t25))));
  double  t32  = ((((((t20) * (t27))) + (((t22) * (t28))))) + (((t24) * (t29))));
  double  t33  = ((((((t27) * (t27))) + (((t28) * (t28))))) + (((t29) * (t29))));
  double  t34  = ((((((t21) * (t27))) + (((t23) * (t28))))) + (((t25) * (t29))));
  double  t35  = ((((((t20) * (t20))) + (((t22) * (t22))))) + (((t24) * (t24))));
  double  t36  = ((((((t27) * (t20))) + (((t28) * (t22))))) + (((t29) * (t24))));
  double  t37  = ((((((t21) * (t20))) + (((t23) * (t22))))) + (((t25) * (t24))));
  double  t38  = fabs(t18);
  static const double  t39[4]  = {0.0416666666666667, 0.0416666666666667, 0.0416666666666667, 0.0416666666666667};
  
  for (int  ip  = 0; (ip) < (4); ip += 1)
  {
    double  t50[10] ;
    double  t51[10] ;
    double  t52[10] ;
    double  t40  = ((t39[ip]) * (t38));
    double  t41  = ((t40) * (t37));
    double  t42  = ((t40) * (t36));
    double  t43  = ((t40) * (t35));
    double  t44  = ((t40) * (t34));
    double  t45  = ((t40) * (t33));
    double  t46  = ((t40) * (t32));
    double  t47  = ((t40) * (t31));
    double  t48  = ((t40) * (t30));
    double  t49  = ((t40) * (t26));
    
    for (int  k  = 0; (k) < (10); k += 1)
    {
      t50[k] = (((((t2[ip][k]) * (t49))) + (((t1[ip][k]) * (t48))))) + (((t0[ip][k]) * (t47)));
      t51[k] = (((((t2[ip][k]) * (t46))) + (((t1[ip][k]) * (t45))))) + (((t0[ip][k]) * (t44)));
      t52[k] = (((((t2[ip][k]) * (t43))) + (((t1[ip][k]) * (t42))))) + (((t0[ip][k]) * (t41)));
      
    }
    
    for (int  j  = 0; (j) < (10); j += 1)
    {
      
      for (int  k  = 0; (k) < (10); k += 1)
      {
        A[j][k] += (((((t52[k]) * (t2[ip][j]))) + (((t51[k]) * (t1[ip][j]))))) + (((t50[k]) * (t0[ip][j])));
        
      }
      
    }
    
  }
  
}
